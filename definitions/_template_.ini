# QUERY CONFIGURATIE
# ==================
# Dit is een voorbeeld voor hoe een query configuratie eruit ziet.
# Zo'n configuratie wordt als `.ini` opgeslagen maar bestaat uit platte tekst.
# Wel is het noodzakelijk om de aanwezige structuur letterlijk over te nemen.
#
# Het configuratiebestand is opgebouwd uit [hoofdstukken].
# Binnen een hoofdstuk definieer je één of meerdere variabelen.
# Een variabele is een naam waar je (eventueel) een waarde aan toeschrijft:
#    <variabele naam>: <waarde>
#
# Een query mag ook een `.txt` bestand zijn met *alleen* een SQL-statement.
# Echter, het heeft voordelen om de query verder te configureren.
# - Ten eerste bevat de query configuratie enkele velden voor meta-informatie,
#   waarmee je queries kunt ordenen en van een toelichting kunt voorzien.
# - Ten tweede bevat de query configuratie de mogelijkheid om de kolomnamen
#   op een eenvoudige manier op te geven, zodat je dit in een latere fase niet
#   meer hoeft te regelen.
# - Tot slot kun je per kolom een datatype opgeven. Het datatype bepaalt oa
#   welke bewerkingen je op een kolom kunt doen en hoe de informatie wordt
#   opgeslagen. Door de datatypen hier op te geven, hoef je daar straks niet
#   meer over na te denken en bovendien leidt dat tot kleinere (en dus snellere)
#   bestanden.
#
# Zie de toelichting bij elk hoofdstuk/variabele voor meer informatie
# over welke informatie nodig is voor een correcte query configuratie.
# Je kunt de `_template_empty_.ini` gebruiken als basis voor een nieuwe query.

[meta]
description:
# Geef hieronder een omschrijving van de bron en het doel van de query op.
# De omschrijving wordt opgeslagen bij de query resultaten.
# Een duidelijke omschrijving kan later baatzaam zijn,
# bij het bewerken van de data.

qtype:
# Het qtype is bedoeld om een interne ordening aan te brengen in de queries.
# Geef queries die bij elkaar horen hun eigen unieke qtype.
#
# Voorbeeld
# =========
#     REF              <- code voor een query op een referentietabel

[query]
sql:
# Geef hieronder een SQL-statement op.
# In het meest simpele geval is een SQL-statement als volgt opgebouwd.
#
# Voorbeeld
# =========
#     select
#        <kolommen>    <- te selecteren kolomnamen
#     from
#        <tabel>       <- tabelnaam om uit te selecteren
#     where
#        <rijen>       <- voorwaarden obv je de rijen selecteert

[columns]
# Geef hieronder de kolomnamen op.
# Optioneel kun je ook een datatype toeschrijven aan een kolom.
# Geef deze op na een dubbele punt.
#
# Meest gebruikte datatypen:
# - str:        tekst <'Lawrence Vriend'>
# - category:   een beperkt aantal categorieën <'BA', 'MA', 'PM'>
# - int64:      gehele getallen <42>
# - float64:    getallen met een breuk <12,5>
# - bool:       waar of onwaar <True, False>
# - datetime64: datum <2019-05-02>
#
# Gebruik van het juiste datatype is belangrijk:
# - Dit bepaalt welke operaties je kunt uitvoeren op een kolom.
# - Door de juiste datatype te kiezen, kun je ruimte besparen.
#
# Voorbeeld
# =========
#     <kolomnaam>: <datatype>
